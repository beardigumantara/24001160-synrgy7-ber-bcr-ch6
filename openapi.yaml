openapi: 3.0.0
info:
  title: SYNRGY Binar Car Rental API
  version: 1.0.0
  description: Open API Documentation for SYNRGY Binar Car Rental API Challenge06
servers:
  - url: http://localhost:8000/api

paths:
  /cars:
    get:
      summary: Get all cars
      tags:
        - Cars
      responses:
        '200':
          description: Get all cars
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Get all cars
                  cars:
                    type: array
                    items:
                      $ref: '#/components/schemas/Car'
                      
  /cars/create:
    post:
      summary: Create a new car
      tags:
        - Cars
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: number
                image:
                  type: string
                start_rent:
                  type: string
                  format: date-time
                finish_rent:
                  type: string
                  format: date-time
                availability:
                  type: boolean
      responses:
        '201':
          description: Car created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Car created successfully
                  car:
                    $ref: '#/components/schemas/Car'
        '400':
          description: Error creating car

  /cars/{id}:
    get:
      summary: Get car by ID
      tags:
        - Cars
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Get specific car by id
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Get specific car by id
                  car:
                    $ref: '#/components/schemas/Car'
        '404':
          description: Data Not Found
    put:
      summary: Update a car
      tags:
        - Cars
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: number
                start_rent:
                  type: string
                  format: date-time
                finish_rent:
                  type: string
                  format: date-time
                availability:
                  type: boolean
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Update a car
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Update a car
                  car:
                    $ref: '#/components/schemas/Car'
        '400':
          description: Error updating car
    delete:
      summary: Soft delete a car
      tags:
        - Cars
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Deleted a car
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Deleted a car
                  car:
                    $ref: '#/components/schemas/Car'
        '400':
          description: Error deleting car

  /users:
    get:
      summary: Get all users
      tags:
        - Users
      responses:
        '200':
          description: Get all users
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Get all users
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      summary: Get user by ID
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Get specific user by id
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Get specific user by id
                  user:
                    $ref: '#/components/schemas/User'
        '404':
          description: Data Not Found
    put:
      summary: Update user
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                role:
                  type: string
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User updated successfully
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Error updating user
    delete:
      summary: Delete user
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Error deleting user
  
  /users/changepass/{id}:
    put:
      summary: Change Password user
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password updated successfully
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Error updating password

  /auth/register:
    post:
      summary: Register user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created successfully
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Error creating user

  /auth/login:
    post:
      summary: Login user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successfully
                  token:
                    type: string
        '400':
          description: Error login

  /whoami:
    get:
      summary: Get current user info
      tags:
        - Auth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Who am I
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Who am I
                  user:
                    $ref: '#/components/schemas/User'

components:
  schemas:
    Car:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        price:
          type: number
        image:
          type: string
        start_rent:
          type: string
          format: date-time
        finish_rent:
          type: string
          format: date-time
        availability:
          type: boolean
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        update_by:
          type: integer
        deleted_by:
          type: integer
        deleted_at:
          type: string
          format: date-time

    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        token:
          type: string
        role:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
